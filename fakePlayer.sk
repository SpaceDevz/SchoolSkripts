# New Fake Player
# Supports 1.10+
# 2.6.1 Skript
# Latest Skript-Reflect

import:

	java.util.UUID
	java.util.List
	java.net.InetAddress
	
	io.netty.channel.ChannelInboundHandlerAdapter
	io.netty.channel.embedded.EmbeddedChannel

	org.bukkit.Bukkit
	org.bukkit.event.player.PlayerPreLoginEvent
	org.bukkit.event.player.AsyncPlayerPreLoginEvent
	org.bukkit.event.player.PlayerJoinEvent
	org.bukkit.event.player.PlayerResourcePackStatusEvent
	org.bukkit.event.player.PlayerQuitEvent
	
	org.bukkit.craftbukkit.v1_17_R1.util.CraftChatMessage
	
	com.destroystokyo.paper.event.player.PlayerInitialSpawnEvent
	com.destroystokyo.paper.PaperConfig
	
	io.papermc.paper.adventure.PaperAdventure
	
	net.kyori.adventure.text.Component
	net.kyori.adventure.text.format.NamedTextColor
	
	ch.njol.skript.Skript
	ch.njol.skript.ServerPlatform
	ch.njol.skript.classes.Changer$ChangerUtils
	ch.njol.skript.classes.Changer$ChangeMode
	
	com.mojang.authlib.GameProfile
	
	net.minecraft.EnumChatFormat
	net.minecraft.world.level.EnumGamemode
	net.minecraft.server.level.EntityPlayer
	net.minecraft.server.network.PlayerConnection
	net.minecraft.network.NetworkManager
	net.minecraft.network.protocol.EnumProtocolDirection
	net.minecraft.network.chat.ChatMessage
	net.minecraft.server.players.PlayerList
	net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo
	net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$EnumPlayerInfoAction
	net.minecraft.network.protocol.game.PacketPlayOutNamedEntitySpawn
	net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy
	net.minecraft.stats.StatisticList
	
effect connect [new] [ro]bot with [nick]name %text% [and uuid %-text%] [to server] saved to %object%:
	parse:
		continue if ChangerUtils.acceptsChange(expr-3, ChangeMode.SET and text) is true
		Skript.error("'%expr-3%' can't be changed")
	trigger:
		delay the effect
		
		set {_platform} to Skript.getServerPlatform()
		
		set {_worldServer} to Bukkit.getWorlds().get(0).getHandle()
		set {_mcServer} to Bukkit.getServer().getServer()
		
		set {_uuid} to random uuid if expr-2 is not set, else expr-2
		set {_uuid} to UUID.fromString({_uuid})
		set {_gameProfile} to new GameProfile({_uuid}, expr-1)
	
		set {_entityPlayer} to new EntityPlayer({_mcServer}, {_worldServer}, {_gameProfile})
	
		set {_bukkitPlayer} to {_entityPlayer}.getBukkitEntity()
	
		set {_protocolDirection} to EnumProtocolDirection.b
		set {_playerConnection} to new PlayerConnection({_mcServer}, new NetworkManager({_protocolDirection}), {_entityPlayer})
		set {_entityPlayer}.b to {_playerConnection}
		
		set {_embeddedChannel} to new EmbeddedChannel(new ChannelInboundHandlerAdapter())
		set {_entityPlayer}.b.a.k to {_embeddedChannel}
		{_entityPlayer}.b.a.k.close()
		
		set {_preLoginEvent} to new PlayerPreLoginEvent("Notch", InetAddress.getByName("127.0.0.1"), {_uuid})
		set {_asyncPreLoginEvent} to new AsyncPlayerPreLoginEvent("Notch", InetAddress.getByName("127.0.0.1"), {_uuid})
		create new section with {_pesexy} stored in {_asyncPreLoginEventSection}:
			Bukkit.getPluginManager().callEvent({_asyncPreLoginEvent}).start()
			return "pesexy"
		run section {_asyncPreLoginEventSection} async with "pesexy" and store result in {_} and wait
		Bukkit.getPluginManager().callEvent({_preLoginEvent}).start()
		
		{_mcServer}.getPlayerList().a({_entityPlayer})
		
		set {_loc} to {_bukkitPlayer}.getLocation()
		{_entityPlayer}.setLocation({_loc}.getX(), {_loc}.getY(), {_loc}.getZ(), {_loc}.getYaw(), {_loc}.getPitch())
		
		set {_gameProfile} to {_entityPlayer}.getProfile()
		set {_userCache} to Bukkit.getServer().getServer().getUserCache()
		set {_cacheProfile} to {_userCache}.getProfile({_gameProfile}.getId())
		set {_s} to {_gameProfile}.getName() ? {_cacheProfile}.getName()
		set {_joinMessage} to (new ChatMessage("multiplayer.player.joined", {_entityPlayer}.getScoreboardDisplayName())) if {_entityPlayer}.getProfile().getName().equalsIgnoreCase({_s}), else (new ChatMessage("multiplayer.player.joined.renamed", {_entityPlayer}.getScoreboardDisplayName(), {_s}))
		set {_chatColor} to EnumChatFormat.o
		{_joinMessage}.a({_chatColor})
		
		if {_platform} is ServerPlatform.BUKKIT_PAPER:
			set {_playerInitialSpawnEvent} to new PlayerInitialSpawnEvent({_bukkitPlayer}, {_bukkitPlayer}.getLocation())
			Bukkit.getPluginManager().callEvent({_playerInitialSpawnEvent})
		
		{_entityPlayer}.spawnIn({_worldServer})
		{_entityPlayer}.d.a({_worldServer})
		
		{_entityPlayer}.d.a(EnumGamemode.c, EnumGamemode.c)
		
		{_worldServer}.addPlayerJoin({_entityPlayer})
		{_mcServer}.getPlayerList().j.add({_entityPlayer})
		
		set {_playerJoinEvent} to new PlayerJoinEvent({_bukkitPlayer}, CraftChatMessage.fromComponent({_joinMessage}))
		if {_platform} is ServerPlatform.BUKKIT_PAPER:
			set {_playerJoinEvent} to new PlayerJoinEvent({_bukkitPlayer}, PaperAdventure.asAdventure({_joinMessage}))
		
		Bukkit.getPluginManager().callEvent({_playerJoinEvent})
	
		set {_finalJoinMessage} to {_playerJoinEvent}.getJoinMessage()
	
		send {_finalJoinMessage} to all players if {_finalJoinMessage} is not ""
	
		set {_resourcePackStatusEventAccepted} to new PlayerResourcePackStatusEvent({_bukkitPlayer}, PlayerResourcePackStatusEvent.Status.ACCEPTED)
		set {_resourcePackStatusEventSuccessfullyLoaded} to new PlayerResourcePackStatusEvent({_bukkitPlayer}, PlayerResourcePackStatusEvent.Status.SUCCESSFULLY_LOADED)
		
		if {_platform} is ServerPlatform.BUKKIT_PAPER:
			{_bukkitPlayer}.setResourcePackStatus(PlayerResourcePackStatusEvent.Status.ACCEPTED)
			{_bukkitPlayer}.setResourcePackStatus(PlayerResourcePackStatusEvent.Status.SUCCESSFULLY_LOADED)
		else:
			Bukkit.getPluginManager().callEvent({_resourcePackStatusEventAccepted})
			Bukkit.getPluginManager().callEvent({_resourcePackStatusEventSuccessfullyLoaded})
	
		set {_playerInfoPacket} to new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.a, {_entityPlayer})
		set {_spawnPlayerPacket} to new PacketPlayOutNamedEntitySpawn({_entityPlayer})
		loop all players:
			set {_connection} to (loop-player).getHandle().b
			{_connection}.sendPacket({_playerInfoPacket})
			{_connection}.sendPacket({_spawnPlayerPacket})
		
		create section with {_pesexy} stored in {_doTick}:
			while {_bukkitPlayer} is online:
				{_entityPlayer}.playerTick()
				wait a tick
		run section {_doTick} async with "pesexy" and store result in {_} and wait
		
		set raw expr-3 to {_entityPlayer}
		continue

effect disconnect [ro]bot %object% [from server]:
	trigger:
		delay the effect
		
		set {_platform} to Skript.getServerPlatform()
		
		set {_worldServer} to Bukkit.getWorlds().get(0).getHandle()
		set {_mcServer} to Bukkit.getServer().getServer()
		set {_craftServer} to Bukkit.getServer()
		
		set {_entityPlayer} to expr-1
		
		set {_bukkitPlayer} to {_entityPlayer}.getBukkitEntity()
		
		{_entityPlayer}.a(StatisticList.j)
		
		{_entityPlayer}.o()
		
		if {_platform} is ServerPlatform.BUKKIT_PAPER:
			set {_playerQuitEvent} to new PlayerQuitEvent({_bukkitPlayer}, Component.translatable("multiplayer.player.left", NamedTextColor.YELLOW, {_bukkitPlayer}.displayName() if PaperConfig.useDisplayNameInQuit, else Component.text({_bukkitPlayer}.getName())), {_entityPlayer}.quitReason)
		else:
			set {_playerQuitEvent} to new PlayerQuitEvent({_bukkitPlayer}, join "ยงe", {_entityPlayer}.getName(), " left the game" using "")
		
		Bukkit.getPluginManager().callEvent({_playerQuitEvent})
		
		{_entityPlayer}.getBukkitEntity().disconnect({_playerQuitEvent}.getQuitMessage())
		
		if {_mcServer}.isMainThread():
			{_entityPlayer}.playerTick()
		
		if size of all items in {_bukkitPlayer}'s inventory is not 0:
			{_bukkitPlayer}'s tool is not air
			{_entityPlayer}.drop({_carried}, false)
			
		{_entityPlayer}.decouple()
		{_worldServer}.a({_entityPlayer})
		{_entityPlayer}.getAdvancementData().a()
		{_mcServer}.getPlayerList().j.remove({_entityPlayer})
		
		delete {-bot::%expr-1%}
		
		set {_finalQuitMessage} to {_playerQuitEvent}.getQuitMessage()
		send {_finalQuitMessage} to all players if {_finalQuitMessage} is not ""
		
		set {_playerInfoPacket} to new PacketPlayOutPlayerInfo(EnumPlayerInfoAction.e, {_entityPlayer})
		set {_destroyEntityPacket} to new PacketPlayOutEntityDestroy({_entityPlayer}.getId())
		loop all players:
			set {_connection} to (loop-player).getHandle().b
			{_connection}.sendPacket({_playerInfoPacket})
			{_connection}.sendPacket({_destroyEntityPacket})